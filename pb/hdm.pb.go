// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hdm.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HotelsRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HotelsRequest) Reset()         { *m = HotelsRequest{} }
func (m *HotelsRequest) String() string { return proto.CompactTextString(m) }
func (*HotelsRequest) ProtoMessage()    {}
func (*HotelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e2090a7b1c290bd, []int{0}
}

func (m *HotelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HotelsRequest.Unmarshal(m, b)
}
func (m *HotelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HotelsRequest.Marshal(b, m, deterministic)
}
func (m *HotelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotelsRequest.Merge(m, src)
}
func (m *HotelsRequest) XXX_Size() int {
	return xxx_messageInfo_HotelsRequest.Size(m)
}
func (m *HotelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HotelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HotelsRequest proto.InternalMessageInfo

func (m *HotelsRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type HotelsResponse struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HotelsResponse) Reset()         { *m = HotelsResponse{} }
func (m *HotelsResponse) String() string { return proto.CompactTextString(m) }
func (*HotelsResponse) ProtoMessage()    {}
func (*HotelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e2090a7b1c290bd, []int{1}
}

func (m *HotelsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HotelsResponse.Unmarshal(m, b)
}
func (m *HotelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HotelsResponse.Marshal(b, m, deterministic)
}
func (m *HotelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotelsResponse.Merge(m, src)
}
func (m *HotelsResponse) XXX_Size() int {
	return xxx_messageInfo_HotelsResponse.Size(m)
}
func (m *HotelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HotelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HotelsResponse proto.InternalMessageInfo

func (m *HotelsResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*HotelsRequest)(nil), "pb.HotelsRequest")
	proto.RegisterType((*HotelsResponse)(nil), "pb.HotelsResponse")
}

func init() { proto.RegisterFile("hdm.proto", fileDescriptor_7e2090a7b1c290bd) }

var fileDescriptor_7e2090a7b1c290bd = []byte{
	// 119 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x48, 0xc9, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe4, 0xe2, 0xf5, 0xc8, 0x2f,
	0x49, 0xcd, 0x29, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62, 0xce, 0x2d,
	0x4e, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x94, 0xb8, 0xf8, 0x60, 0x4a,
	0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x31, 0xd5, 0x18, 0x99, 0x71, 0x31, 0x7b, 0xb8, 0xf8, 0x0a,
	0xe9, 0x73, 0xb1, 0x41, 0x94, 0x0a, 0x09, 0xea, 0x15, 0x24, 0xe9, 0xa1, 0x98, 0x2c, 0x25, 0x84,
	0x2c, 0x04, 0x31, 0x29, 0x89, 0x0d, 0xec, 0x12, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3,
	0x55, 0x1b, 0x6a, 0x96, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HDMClient is the client API for HDM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HDMClient interface {
	Hotels(ctx context.Context, in *HotelsRequest, opts ...grpc.CallOption) (*HotelsResponse, error)
}

type hDMClient struct {
	cc *grpc.ClientConn
}

func NewHDMClient(cc *grpc.ClientConn) HDMClient {
	return &hDMClient{cc}
}

func (c *hDMClient) Hotels(ctx context.Context, in *HotelsRequest, opts ...grpc.CallOption) (*HotelsResponse, error) {
	out := new(HotelsResponse)
	err := c.cc.Invoke(ctx, "/pb.HDM/Hotels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HDMServer is the server API for HDM service.
type HDMServer interface {
	Hotels(context.Context, *HotelsRequest) (*HotelsResponse, error)
}

// UnimplementedHDMServer can be embedded to have forward compatible implementations.
type UnimplementedHDMServer struct {
}

func (*UnimplementedHDMServer) Hotels(ctx context.Context, req *HotelsRequest) (*HotelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hotels not implemented")
}

func RegisterHDMServer(s *grpc.Server, srv HDMServer) {
	s.RegisterService(&_HDM_serviceDesc, srv)
}

func _HDM_Hotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HDMServer).Hotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HDM/Hotels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HDMServer).Hotels(ctx, req.(*HotelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HDM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HDM",
	HandlerType: (*HDMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hotels",
			Handler:    _HDM_Hotels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hdm.proto",
}
